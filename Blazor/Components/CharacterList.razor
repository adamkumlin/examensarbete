@inject IHttpClientFactory HttpClientFactory
@using Blazor.Data
@using System.Text.Json
@using Blazor.Components
@rendermode InteractiveServer

<div>
    @if (characters.Any() && focusedCharacter is null)
    {
        @foreach (Character character in characters)
        {
            <CharacterCard character="character" onStateChange="setFocusedCharacter" />
        }
    }
    else if (focusedCharacter is not null)
    {
        <CharacterDetailsCard character="focusedCharacter" onStateChange="unsetFocusedCharacter" />
    }
    else
    {
        <h2>No characters found.</h2>
    }
</div>

@code {
    public IEnumerable<Character> characters { get; set; } = [];
    public Character? focusedCharacter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get, "https://swapi.dev/api/people");
        var httpClient = HttpClientFactory.CreateClient();
        var response = await httpClient.SendAsync(request);

        // Return exception if response is not successful
        response.EnsureSuccessStatusCode();

        // Parse json as string
        string jsonResponse = await response.Content.ReadAsStringAsync();

        characters = JsonSerializer.Deserialize<ApiResponse>(jsonResponse, new
        JsonSerializerOptions
        { PropertyNameCaseInsensitive = true }).Results;
    }

    private void setFocusedCharacter(Character character)
    {
        focusedCharacter = character;
    }

    private void unsetFocusedCharacter()
    {
        focusedCharacter = null;
    }
}
